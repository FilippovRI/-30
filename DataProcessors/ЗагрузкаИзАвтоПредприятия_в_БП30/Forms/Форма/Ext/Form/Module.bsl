Перем НовыйДокумент;
&НаСервере
Функция СоздатьНовыйДоговор(НомерДоговора, ДатаДоговора, Контрагент, Организация, ВидДоговора)
	
	НаименованиеДоговора = "Основной договор";
	ОрганизацияДоговора = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", НаименованиеДоговора);
	Запрос.УстановитьПараметр("Организация", ОрганизацияДоговора);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Наименование = &Наименование
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	СуществующийДоговор = Выборка.Ссылка;
	
	Если ЗначениеЗаполнено(СуществующийДоговор) Тогда
		
		Возврат СуществующийДоговор;
		
	Иначе
		
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НовыйДоговор.Наименование 	= НаименованиеДоговора;
		НовыйДоговор.Номер 			= НомерДоговора;
		НовыйДоговор.Дата 			= ДатаДоговора;
		НовыйДоговор.Организация 	= ОрганизацияДоговора;
		НовыйДоговор.Владелец 		= Контрагент;
		НовыйДоговор.ВидДоговора 	= ВидДоговора;
		НовыйДоговор.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
		
		Справочники.ДоговорыКонтрагентов.ЗаполнитьРуководителяОрганизации(НовыйДоговор);
		Справочники.ДоговорыКонтрагентов.ЗаполнитьРуководителяКонтрагента(НовыйДоговор);
		
		НовыйДоговор.Записать();
		
		Возврат НовыйДоговор.Ссылка;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗагрузку(Команда)
	ТаблицаДокументовРТУ.Очистить();
	ТаблицаУслуг.Очистить();
	ТаблицаТоваров.Очистить();
	ТаблицаЕдиницИзмерений.Очистить();
	ТаблицаНоменклатура.Очистить();
	ТаблицаКонтрагентов.Очистить();
	ВыполнитьЗагрузкуНаСервере();
	ПоказатьОповещениеПользователя("Загрузка выполнена",,"Загрузка успешно завершена "+ТекущаяДата());
КонецПроцедуры


&НаСервере
Процедура ВыполнитьЗагрузкуНаСервере()
	ЗагрузитьЕдиницы();
	ЗагрузитьНоменклатуру();	
	ЗагрузитьКонтрагентов();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЕдиницы()
	
	Попытка
		Текст = Новый ЧтениеТекста(ФайлЕдИзм);
	Исключение
		Сообщить("Ошибка! Файл не найден:" + ФайлЕдИзм);
		Возврат;
	КонецПопытки;
	Стр = Текст.ПрочитатьСтроку();
	
	Пока Стр <> Неопределено Цикл	
		МассивПолученныхЗначений = РазложитьСтрокуВМассивПодстрок(Стр, "$$$");
		
		Если МассивПолученныхЗначений.Количество()>0 Тогда								 
			
			СчитываниеТекстаВТаблицуЗначенийЕдиницИзмерений(МассивПолученныхЗначений);
			
		КонецЕсли;
		Стр = Текст.ПрочитатьСтроку();   
		
	КонецЦикла;
	ТаблицаЕдиницИзмерений.Сортировать("Создать Убыв");
КонецПроцедуры	

Процедура ЗагрузитьНоменклатуру()
	
	Попытка
		Текст = Новый ЧтениеТекста(ФайлНоменклатуры);
	Исключение
		Сообщить("Ошибка! Файл не найден:" + ФайлНоменклатуры);
		Возврат;
	КонецПопытки;
	Стр = Текст.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл	
		МассивПолученныхЗначений = РазложитьСтрокуВМассивПодстрок(Стр, "$$$");
		
		Если МассивПолученныхЗначений.Количество()>0 Тогда								 
			
			СчитываниеТекстаВТаблицуЗначенийНоменклатура(МассивПолученныхЗначений);
			
		КонецЕсли;
		Стр = Текст.ПрочитатьСтроку();   
		
	КонецЦикла;
	ТаблицаНоменклатура.Сортировать("НоваяНоменклатура Убыв");
	
КонецПроцедуры

Процедура ЗагрузитьКонтрагентов()
	Попытка
		Текст = Новый ЧтениеТекста(ФайлКонтрагентов);
	Исключение
		Сообщить("Ошибка! Файл не найден:" + ФайлКонтрагентов);
		Возврат;
	КонецПопытки;
	Стр = Текст.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл	
		МассивПолученныхЗначений = РазложитьСтрокуВМассивПодстрок(Стр, "$$$");
		
		Если МассивПолученныхЗначений.Количество()>0 Тогда								 
			
			СчитываниеТекстаВТаблицуЗначенийКонтрагентов(МассивПолученныхЗначений);
			
		КонецЕсли;
		Стр = Текст.ПрочитатьСтроку();   	
	КонецЦикла;
	ТаблицаКонтрагентов.Сортировать("Создать Убыв");
КонецПроцедуры	
	

Процедура СчитываниеТекстаВТаблицуЗначенийНоменклатура(МассивПолученныхЗначений)	
	Счетчик=0;
	Если не Справочники.Номенклатура.НайтиПоКоду("AS"+СтрЗаменить(МассивПолученныхЗначений[0],"""","")) = Справочники.Номенклатура.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;	
	ЗагружаемаяНоменклатура=ТаблицаНоменклатура.Добавить();
	ЗагружаемаяНоменклатура.Код="AS"+СтрЗаменить(МассивПолученныхЗначений[0],"""","");
	ЗагружаемаяНоменклатура.Наименование=СтрЗаменить(МассивПолученныхЗначений[1],"""","");
	ЗагружаемаяНоменклатура.Артикул= СтрЗаменить(МассивПолученныхЗначений[14],"""","");
	ЕдиницаИзмерения="AS"+СтрЗаменить(МассивПолученныхЗначений[8],"""","");
	ЗагружаемаяНоменклатура.Родитель = ГруппаНоменклатуры;
	ЗагружаемаяНоменклатура.СтавкаНДС= СтавкаНДС;
	ЗагружаемаяНоменклатура.НоменклатурнаяГруппа=НоменклатурнаяГруппа;
	ЗагружаемаяНоменклатура.ЕдИзм= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(ЕдиницаИзмерения);
	ЗагружаемаяНоменклатура.ВидНоменклатуры=ВидНоменклатуры;
	ПоискСсылкиНаНоменклатуры = Справочники.Номенклатура.НайтиПоКоду(ЗагружаемаяНоменклатура.Код);
	
	Если ПоискСсылкиНаНоменклатуры = Справочники.Номенклатура.ПустаяСсылка() Тогда
		ЗагружаемаяНоменклатура.НоваяНоменклатура=Истина;
		Счетчик=Счетчик+1;
		Элементы.СоздатьНовуюНоменклатуру.Доступность=Истина;
		Элементы.Номенклатура.Заголовок="Номенклатура ("+Счетчик+")";
	иначе
		ЗагружаемаяНоменклатура.Номенклатура = ПоискСсылкиНаНоменклатуры;	
	КонецЕсли;	
КонецПроцедуры	

Процедура СчитываниеТекстаВТаблицуЗначенийЕдиницИзмерений(МассивПолученныхЗначений)
	Счетчик=0;
	Если не Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду( "AS"+СтрЗаменить(МассивПолученныхЗначений[0],"""",""))
		= Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда
		Возврат;
    КонецЕсли;
	ЗагружаемаяЕдиницаИзмерений=ТаблицаЕдиницИзмерений.Добавить();
	ЗагружаемаяЕдиницаИзмерений.Код = "AS"+СтрЗаменить(МассивПолученныхЗначений[0],"""","");
	ЗагружаемаяЕдиницаИзмерений.Наименование = СтрЗаменить(МассивПолученныхЗначений[2],"""","");
	ЗагружаемаяЕдиницаИзмерений.НаименованиеПолное = СтрЗаменить(МассивПолученныхЗначений[1],"""","");
	Если Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(ЗагружаемаяЕдиницаИзмерений.Код) = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда
		ЗагружаемаяЕдиницаИзмерений.Создать=Истина;
		Счетчик=Счетчик+1;
		Элементы.СоздатьНовуюЕдиницуИзмерения.Доступность=Истина;
		Элементы.ЕдиницыИзмерений.Заголовок="Единицы измерений ("+Счетчик+")";
		
	иначе
		ЗагружаемаяЕдиницаИзмерений.ЕдиницаИзмерения =  Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(ЗагружаемаяЕдиницаИзмерений.Код);
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура СчитываниеТекстаВТаблицуЗначенийКонтрагентов(МассивПолученныхЗначений)
	Если не Справочники.Контрагенты.НайтиПоКоду("AS"+СтрЗаменить(МассивПолученныхЗначений[0],"""","")) 
		= Справочники.Контрагенты.ПустаяСсылка() Тогда
    Возврат;
	КонецЕсли;
	Счетчик=0;
	ЗагружаемыеКонтрагенты=ТаблицаКонтрагентов.Добавить();
	ЗагружаемыеКонтрагенты.Код = "AS"+СтрЗаменить(МассивПолученныхЗначений[0],"""","");
	ЗагружаемыеКонтрагенты.Наименование = СтрЗаменить(МассивПолученныхЗначений[1],"""","");
	ЗагружаемыеКонтрагенты.НаименованиеПолное = СтрЗаменить(МассивПолученныхЗначений[1],"""","");
	ЗагружаемыеКонтрагенты.ИНН=СтрЗаменить(МассивПолученныхЗначений[5],"""","");
	ЗагружаемыеКонтрагенты.Родитель = ГруппаКонтрагентов;
	ЗагружаемыеКонтрагенты.ЮридическоеФизическоеЛицо=?(СтрЗаменить(МассивПолученныхЗначений[2],"""","")="1",Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо,Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	Если Справочники.Контрагенты.НайтиПоКоду(ЗагружаемыеКонтрагенты.Код) = Справочники.Контрагенты.ПустаяСсылка() Тогда
		ЗагружаемыеКонтрагенты.Создать=Истина;
		Элементы.СоздатьНовогоКонтрагента.Доступность=Истина;
		Счетчик=Счетчик+1;
		Элементы.Контрагенты.Заголовок="Контрагенты ("+Счетчик+")";
		
		
	иначе
		ЗагружаемыеКонтрагенты.Контрагент =  Справочники.Контрагенты.НайтиПоКоду(ЗагружаемыеКонтрагенты.Код);
		
	КонецЕсли;		
	
	
КонецПроцедуры

Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено,
	СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Если Разделитель = ","
		И ПропускатьПустыеСтроки = Неопределено
		И СокращатьНепечатаемыеСимволы Тогда
		
		Результат = СтрРазделить(Значение, ",", Ложь);
		Для Индекс = 0 По Результат.ВГраница() Цикл
			Результат[Индекс] = СокрЛП(Результат[Индекс])
		КонецЦикла;
		Возврат Результат;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


&НаКлиенте
Функция ВыборФайла(Элемент,Фильтр,Расширение)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр                      = Фильтр;
	ДиалогВыбораФайла.Заголовок                   = "Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.МножественныйВыбор          = Ложь;
	ДиалогВыбораФайла.Расширение                  =расширение;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла              = Элемент.ТекстРедактирования;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Возврат ДиалогВыбораФайла.ПолноеИмяФайла;
	Иначе
		Возврат Элемент.ТекстРедактирования;
	КонецЕсли;
	
	
КонецФункции



&НаКлиенте
Процедура ФайлЕдИзмНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ФайлЕдИзм=ВыборФайла(Элемент,"(e*.txt)|e*.txt","txt");
КонецПроцедуры

&НаКлиенте
Процедура ФайлНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ФайлНоменклатуры=ВыборФайла(Элемент,"(n*.txt)|n*.txt","txt");
КонецПроцедуры

&НаКлиенте
Процедура ФайлКонтрагентовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ФайлКонтрагентов=ВыборФайла(Элемент,"(k*.txt)|k*.txt","txt");
КонецПроцедуры

&НаКлиенте
Процедура ФайлДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ФайлДокументов=ВыборФайла(Элемент,"(d*.txt)|d*.txt","txt");
КонецПроцедуры


&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Для каждого элемент из ПроверяемыеРеквизиты Цикл 
		Если НЕ ЗначениеЗаполнено(элемент) тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Функция СоздатьНовуюНоменклатуруНаСервере(КодНоменклатуры,Родитель,Наименование,Артикул,ЕдИзм)
	
	Если Справочники.Номенклатура.НайтиПоКоду(КодНоменклатуры) 
		= Справочники.Номенклатура.ПустаяСсылка() Тогда
		НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
		НовыйЭлемент.Код = КодНоменклатуры;
		НовыйЭлемент.Родитель = Родитель;
		НовыйЭлемент.ВидСтавкиНДС = СтавкаНДС;
		НовыйЭлемент.Наименование = Наименование;
		НовыйЭлемент.НаименованиеПолное = Наименование + 
		" (арт. " + Артикул + ")";
		НовыйЭлемент.ЕдиницаИзмерения = ЕдИзм;
		НовыйЭлемент.ВидНоменклатуры = 	ВидНоменклатуры;
		НовыйЭлемент.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
		НовыйЭлемент.Комментарий="#Создано автоматической обработкой "+ТекущаяДатаСеанса();
		Попытка
			НовыйЭлемент.Записать();
			Сообщить("Создана новая номенклатура "+НовыйЭлемент.Ссылка);
			Возврат НовыйЭлемент.Ссылка;
		Исключение
			Сообщить("Не удалось создать номенклатуру "+ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СоздатьНовуюНоменклатуру(Команда)
	
	Для каждого ДанныеЗаполненияНоменклатуры из ТаблицаНоменклатура Цикл
		Если ДанныеЗаполненияНоменклатуры.НоваяНоменклатура=Истина Тогда
			СоздатьНовуюНоменклатуруНаСервере(ДанныеЗаполненияНоменклатуры.Код,
			ДанныеЗаполненияНоменклатуры.Родитель,
			ДанныеЗаполненияНоменклатуры.Наименование,
			ДанныеЗаполненияНоменклатуры.Артикул,
			ДанныеЗаполненияНоменклатуры.ЕдИзм);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция СоздатьНовуюЕдиницуИзмеренияНаСервере(Код,НаименованиеПолное,Наименование)
	Если Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Код) 
		= Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда

	НовыйЭлемент = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
			НовыйЭлемент.Код = Код;
			НовыйЭлемент.НаименованиеПолное = НаименованиеПолное;
			НовыйЭлемент.Наименование = Наименование;
		Попытка
			НовыйЭлемент.Записать();
			Сообщить("Создана новая единица измерения "+НовыйЭлемент.Ссылка);
			Возврат НовыйЭлемент.Ссылка;
		Исключение
			Сообщить("Не удалось создать единицу измерения "+ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
  КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СоздатьНовуюЕдиницуИзмерения(Команда)
	Для каждого ДанныеЗаполненияЕдиницИзмерения из ТаблицаЕдиницИзмерений Цикл
		Если ДанныеЗаполненияЕдиницИзмерения.Создать=Истина Тогда
			СоздатьНовуюЕдиницуИзмеренияНаСервере(ДанныеЗаполненияЕдиницИзмерения.Код,
			ДанныеЗаполненияЕдиницИзмерения.НаименованиеПолное,
			ДанныеЗаполненияЕдиницИзмерения.Наименование);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция СоздатьНовогоКонтрагентаНаСервере(Код,ЮридическоеФизическоеЛицо,Наименование,ИНН)
		Если Справочники.Контрагенты.НайтиПоКоду(Код) = Справочники.Контрагенты.ПустаяСсылка() Тогда
			НовыйЭлемент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйЭлемент.Код = Код;
			НовыйЭлемент.Родитель = ГруппаКонтрагентов;
			НовыйЭлемент.Наименование = Наименование;
			НовыйЭлемент.НаименованиеПолное = Наименование;		
			НовыйЭлемент.ЮридическоеФизическоеЛицо = ЮридическоеФизическоеЛицо;		
			НовыйЭлемент.ИНН = ИНН;
			НовыйЭлемент.Комментарий="#Создан автоматической обработкой"+ТекущаяДата();
	Попытка
			НовыйЭлемент.Записать();
			Сообщить("Создана новый контрагент "+НовыйЭлемент.Ссылка);
			Возврат НовыйЭлемент.Ссылка;
		Исключение
			Сообщить("Не удалось создать контрагента "+ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СоздатьНовогоКонтрагента(Команда)
		Для каждого ДанныеЗаполненияКонтрагентов из ТаблицаКонтрагентов Цикл
		Если ДанныеЗаполненияКонтрагентов.Создать=Истина Тогда
			СоздатьНовогоКонтрагентаНаСервере(ДанныеЗаполненияКонтрагентов.Код,
			ДанныеЗаполненияКонтрагентов.ЮридическоеФизическоеЛицо,
			ДанныеЗаполненияКонтрагентов.Наименование,
			ДанныеЗаполненияКонтрагентов.ИНН);
		КонецЕсли;
		
	КонецЦикла;
	 
КонецПроцедуры
&НаСервере
Функция УбратьКавычки(РедактируемаяСтрока)
 Возврат СтрЗаменить(РедактируемаяСтрока,"""","");	
КонецФункции	
&НаСервере
Процедура СоздатьДокументыНаСервере()
	Если ТаблицаЕдиницИзмерений.Количество()>0 Тогда
		Сообщить("Требуется создать новый элемент единицы измерений. 
		|Перейди на вкладку <Единицы измерений> и нажать создать в 1С");
		Возврат;
	КонецЕсли;	
	
	Если ТаблицаНоменклатура.Количество()>0 Тогда
		Сообщить("Требуется создать новый элемент номенклатура. 
		|Перейди на вкладку <Номенклатура> и нажать создать в 1С");
		Возврат;
	КонецЕсли;	

	Если ТаблицаКонтрагентов.Количество()>0 Тогда
		Сообщить("Требуется создать новый элемент контрагента. 
		|Перейди на вкладку <Контрагенты> и нажать создать в 1С");
		Возврат;
	КонецЕсли;	

	
	Попытка
		Текст = Новый ЧтениеТекста(ФайлДокументов);
	Исключение
		Сообщить("Ошибка! Файл не найден:" + ФайлДокументов);
		Возврат;
	КонецПопытки;
	
	СоздаемДокумент = 1;  
	ПервыйДокумент = 1;
	ПрошлыйНомерДок = "";
	Стр = Текст.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл // строки читаются до символа перевода строки
		Стр=СтрЗаменить(Стр,"2,,""РН ","2,""РН ");
		Стр=СтрЗаменить(Стр,"^-^","");
		МассивЗнач = РазложитьСтрокуВМассивПодстрок(Стр, "$$$");
		
		ТипДок = УбратьКавычки(МассивЗнач[0]);
		
		Если ТипДок = "1" Тогда
			Документ = Документы.ПоступлениеТоваровУслуг;
		ИначеЕсли ТипДок = "2" или ТипДок = "3" Тогда
			Документ = Документы.РеализацияТоваровУслуг;
		Иначе
			//Неизвестный тип документа
			Стр = Текст.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;	
		
		НомерДок = "AS"+УбратьКавычки(МассивЗнач[1]);
		ДатаДок =  Дата("20"+Прав(УбратьКавычки(МассивЗнач[2]),2),Сред(УбратьКавычки(МассивЗнач[2]),4,2),Лев(УбратьКавычки(МассивЗнач[2]),2)); 
		
		Если ПрошлыйНомерДок<>НомерДок тогда //Новый документ в файле
			ПрошлыйНомерДок = НомерДок;
			Если (ПервыйДокумент = 0) и (СоздаемДокумент = 1) тогда
				Если ПровестиДокументы = Истина Тогда
					НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЕсли;
			Если Документ.НайтиПоНомеру(НомерДок,ДатаДок) = Документ.ПустаяСсылка() Тогда
				СоздаемДокумент=1;
				ПервыйДокумент = 0;
				НовыйДокумент = Документ.СоздатьДокумент();
				НовыйДокумент.Организация = Организация;
				НовыйДокумент.Номер = НомерДок;
				НовыйДокумент.Дата = ДатаДок;
				НовыйДокумент.Склад = Склад;
				ЗаполнениеДокументов.Заполнить(НовыйДокумент, , Истина);
				Контрагент = Справочники.Контрагенты.НайтиПоКоду("AS"+УбратьКавычки(МассивЗнач[3]));
				//ОбъектКонтрагент = Контрагент.ПолучитьОбъект();
				НовыйДокумент.Контрагент = Контрагент;
				
				
				Если ТипДок = "1" Тогда
					ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
				Иначе
					ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
				КонецЕсли;
				
				//Если Контрагент.ОсновнойДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				Если Не РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДоговорКонтрагента,Контрагент,Организация,ВидДоговора) Тогда
					НомерДоговора="";
					//Если ТипДок.Значение = "1" Тогда
					//	Договор = СоздатьНовыйДоговор(НомерДоговора, ДатаДок, Контрагент, НовыйДокумент.Организация,Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
					//Иначе
					//	Договор = СоздатьНовыйДоговор(НомерДоговора, ДатаДок, Контрагент, НовыйДокумент.Организация,Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
					//КонецЕсли;
					ПараметрыДоговора = Новый Структура;
					ПараметрыДоговора.Вставить("Организация", Организация);
					ПараметрыДоговора.Вставить("ВидДоговора", ВидДоговора);
					ПараметрыДоговора.Вставить("Владелец",Контрагент);
					ПараметрыСоздания = Новый Структура("ЗначенияЗаполнения", ПараметрыДоговора);
					
					ДоговорКонтрагента = РаботаСДоговорамиКонтрагентовБПВызовСервера.СоздатьОсновнойДоговорКонтрагента(ПараметрыСоздания);
					//ОбъектКонтрагент.ОсновнойДоговорКонтрагента = Договор;
					//ОбъектКонтрагент.Записать();
					НовыйДокумент.ДоговорКонтрагента = ДоговорКонтрагента;
				Иначе
					НовыйДокумент.ДоговорКонтрагента = ДоговорКонтрагента;
				КонецЕсли;
				
				НовыйДокумент.СуммаВключаетНДС = Истина;
				//НовыйДокумент.УчитыватьНДС = Истина;
				Если ТипДок = "1" Тогда
					НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
				ИначеЕсли ТипДок = "2" или ТипДок = "3" Тогда
					НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
				КонецЕсли;	
			Иначе
				Если СоздаватьТолькоНовыеДокументы=Ложь Тогда
				НовыйДокумент = Документ.НайтиПоНомеру(НомерДок,ДатаДок).ПолучитьОбъект();
				КонецЕсли;
				СоздаемДокумент=0;
				Стр = Текст.ПрочитатьСтроку();
				Продолжить;
				
			КонецЕсли;
		КонецЕсли;
		
		
		Если СоздаемДокумент=1 тогда
			Если ТипДок = "1" Тогда
				Товар = НовыйДокумент.Товары.Добавить();
				Товар.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("AS"+УбратьКавычки(МассивЗнач[8]));
				
				Товар.СчетУчетаНДС = СчетНДСПокупка;
				Товар.ЕдиницаИзмерения = Товар.Номенклатура.ЕдиницаИзмерения;
				Товар.Коэффициент = 1;
				Товар.Количество = УбратьКавычки(МассивЗнач[9]);
				Товар.СчетУчета = СчетУчета;
				Товар.ОтражениевУСН = РасходыНУ;
				Товар.СтавкаНДС = СтавкаНДС;
				Товар.Цена = УбратьКавычки(МассивЗнач[10]);
				Товар.Сумма = УбратьКавычки(МассивЗнач[14]);
				Товар.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
				Товар.Сумма,
				НовыйДокумент.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Товар.СтавкаНДС, ));
				
			ИначеЕсли УбратьКавычки(МассивЗнач[8])="@" тогда
				Попытка
					Значение = Число(УбратьКавычки(МассивЗнач[10]));
					Удача=1;
				Исключение 
					Удача = 0;
				КонецПопытки;
				Если Удача = 0 тогда
					Услуга = НовыйДокумент.Услуги.Добавить();
					Услуга.СчетДоходов = СчетДоходов;
					Услуга.СчетУчетаНДСПоРеализации = СчетНДС;
					Услуга.СчетРасходов = СчетРасходов;
					Услуга.Субконто = НоменклатурнаяГруппа;
					
					Услуга.Содержание = УбратьКавычки(МассивЗнач[10]);
					Услуга.Количество = УбратьКавычки(МассивЗнач[13]);
					Услуга.СтавкаНДС = СтавкаНДС;
					Услуга.Цена = УбратьКавычки(МассивЗнач[14]);
					Услуга.Сумма = УбратьКавычки(МассивЗнач[16]);
					//Услуга.СуммаНДС = УбратьКавычки(МассивЗнач[15]);
					Услуга.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
					Услуга.Сумма,
					НовыйДокумент.СуммаВключаетНДС,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Услуга.СтавкаНДС, ));
					
				иначе
					Услуга = НовыйДокумент.Услуги.Добавить();
					Услуга.СчетДоходов = СчетДоходов;
					Услуга.СчетУчетаНДСПоРеализации = СчетНДС;
					Услуга.СчетРасходов = СчетРасходов;
					Услуга.Субконто = НоменклатурнаяГруппа;
					Услуга.Содержание = "Услуга";
					Услуга.Количество = 1;
					Услуга.СтавкаНДС = СтавкаНДС;
					Услуга.Цена = УбратьКавычки(МассивЗнач[10]);
					Услуга.Сумма = УбратьКавычки(МассивЗнач[10]);
					
					Услуга.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
					Услуга.Сумма,
					НовыйДокумент.СуммаВключаетНДС,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Услуга.СтавкаНДС, ));
				Конецесли;
			Иначе
				Товар = НовыйДокумент.Товары.Добавить();
				Товар.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("AS"+УбратьКавычки(МассивЗнач[8]));
				
				Товар.СчетДоходов = СчетДоходов;
				Товар.СчетУчетаНДСПоРеализации = СчетНДС;
				Товар.СчетРасходов = СчетРасходов;
				Товар.Субконто = НоменклатурнаяГруппа;
				Товар.ЕдиницаИзмерения = Товар.Номенклатура.ЕдиницаИзмерения;
				Товар.Коэффициент = 1;
				Товар.Количество = УбратьКавычки(МассивЗнач[9]);
				Товар.СчетУчета = СчетУчета;
				Товар.СтавкаНДС = СтавкаНДС;
				Товар.Цена = УбратьКавычки(МассивЗнач[10]);
				Товар.Сумма = УбратьКавычки(МассивЗнач[14]);
				//Товар.СуммаНДС = УбратьКавычки(МассивЗнач[13]);
				Товар.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
				Товар.Сумма,
				НовыйДокумент.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Товар.СтавкаНДС, ));
				
			КонецЕсли;
		КонецЕсли;
		
		//НовыйДокумент.Записать();
		Стр = Текст.ПрочитатьСтроку();
	КонецЦикла;
	Если ПервыйДокумент = 0 тогда
		НовыйДокумент.Комментарий="#Создан с помощью обработки "+ТекущаяДатаСеанса();
		
		Если ПровестиДокументы = Истина Тогда
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		НовыйДок=ТаблицаНовыхДокументов.Добавить();
		НовыйДок.Документ=НовыйДокумент.Ссылка;	
	КонецЕсли;
	//
   
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	СоздатьДокументыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовРТУПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ТаблицаДокументовРТУ.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ТаблицаТоваров.ОтборСтрок = Неопределено;
		
		//Элементы.Товары.Заголовок="Товары";
		
	Иначе
		
		ТекНомер = ТекущиеДанные.Номер;
		ТекДата = ТекущиеДанные.Дата;
		
		Элементы.ТаблицаТоваров.ОтборСтрок = Новый ФиксированнаяСтруктура("Номер,Дата", ТекНомер,ТекДата);
		//Элементы.Товары.Заголовок="Товары ("+Элементы.ТаблицаТоваров.ОтборСтрок.Количество()+")";
		
	КонецЕсли;
	
	ТекущиеДанныеУслуг = Элементы.ТаблицаДокументовРТУ.ТекущиеДанные;
	
	Если ТекущиеДанныеУслуг = Неопределено Тогда
		
		Элементы.ТаблицаУслуг.ОтборСтрок=Неопределено;
		//Элементы.Товары.Заголовок="Услуги";
	иначе
		
		ТекНомерУслуг = ТекущиеДанные.Номер;
		ТекДатаУслуг = ТекущиеДанные.Дата;

		Элементы.ТаблицаУслуг.ОтборСтрок = Новый ФиксированнаяСтруктура("Номер,Дата", ТекНомерУслуг,ТекДатаУслуг);
		//Элементы.Услуги.Заголовок="Услуги ("+Элементы.ТаблицаУслуг.ОтборСтрок.Количество()+")";
		
	КонецЕсли;
КонецПроцедуры

